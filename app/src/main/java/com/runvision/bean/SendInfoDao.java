package com.runvision.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEND_INFO".
*/
public class SendInfoDao extends AbstractDao<SendInfo, Long> {

    public static final String TABLENAME = "SEND_INFO";

    /**
     * Properties of entity SendInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CardName = new Property(1, String.class, "CardName", false, "CardName");
        public final static Property CardSex = new Property(2, String.class, "CardSex", false, "CardSex");
        public final static Property CardNation = new Property(3, String.class, "CardNation", false, "CardNation");
        public final static Property CardBorn = new Property(4, String.class, "CardBorn", false, "CardBorn");
        public final static Property CardCountry = new Property(5, String.class, "CardCountry", false, "CardCountry");
        public final static Property CardNo = new Property(6, String.class, "CardNo", false, "CardNo");
        public final static Property CardApartment = new Property(7, String.class, "CardApartment", false, "CardApartment");
        public final static Property CardPeriod = new Property(8, String.class, "CardPeriod", false, "CardPeriod");
        public final static Property CardImage = new Property(9, String.class, "CardImage", false, "CardImage");
        public final static Property SnapImage = new Property(10, String.class, "SnapImage", false, "SnapImage");
        public final static Property CompareScore = new Property(11, float.class, "CompareScore", false, "CompareScore");
        public final static Property CompareTime = new Property(12, long.class, "CompareTime", false, "CompareTime");
        public final static Property CompareResult = new Property(13, String.class, "CompareResult", false, "CompareResult");
    }


    public SendInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SendInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEND_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CardName\" TEXT," + // 1: CardName
                "\"CardSex\" TEXT," + // 2: CardSex
                "\"CardNation\" TEXT," + // 3: CardNation
                "\"CardBorn\" TEXT," + // 4: CardBorn
                "\"CardCountry\" TEXT," + // 5: CardCountry
                "\"CardNo\" TEXT," + // 6: CardNo
                "\"CardApartment\" TEXT," + // 7: CardApartment
                "\"CardPeriod\" TEXT," + // 8: CardPeriod
                "\"CardImage\" TEXT," + // 9: CardImage
                "\"SnapImage\" TEXT," + // 10: SnapImage
                "\"CompareScore\" REAL NOT NULL ," + // 11: CompareScore
                "\"CompareTime\" INTEGER NOT NULL ," + // 12: CompareTime
                "\"CompareResult\" TEXT);"); // 13: CompareResult
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEND_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SendInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CardName = entity.getCardName();
        if (CardName != null) {
            stmt.bindString(2, CardName);
        }
 
        String CardSex = entity.getCardSex();
        if (CardSex != null) {
            stmt.bindString(3, CardSex);
        }
 
        String CardNation = entity.getCardNation();
        if (CardNation != null) {
            stmt.bindString(4, CardNation);
        }
 
        String CardBorn = entity.getCardBorn();
        if (CardBorn != null) {
            stmt.bindString(5, CardBorn);
        }
 
        String CardCountry = entity.getCardCountry();
        if (CardCountry != null) {
            stmt.bindString(6, CardCountry);
        }
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(7, CardNo);
        }
 
        String CardApartment = entity.getCardApartment();
        if (CardApartment != null) {
            stmt.bindString(8, CardApartment);
        }
 
        String CardPeriod = entity.getCardPeriod();
        if (CardPeriod != null) {
            stmt.bindString(9, CardPeriod);
        }
 
        String CardImage = entity.getCardImage();
        if (CardImage != null) {
            stmt.bindString(10, CardImage);
        }
 
        String SnapImage = entity.getSnapImage();
        if (SnapImage != null) {
            stmt.bindString(11, SnapImage);
        }
        stmt.bindDouble(12, entity.getCompareScore());
        stmt.bindLong(13, entity.getCompareTime());
 
        String CompareResult = entity.getCompareResult();
        if (CompareResult != null) {
            stmt.bindString(14, CompareResult);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SendInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CardName = entity.getCardName();
        if (CardName != null) {
            stmt.bindString(2, CardName);
        }
 
        String CardSex = entity.getCardSex();
        if (CardSex != null) {
            stmt.bindString(3, CardSex);
        }
 
        String CardNation = entity.getCardNation();
        if (CardNation != null) {
            stmt.bindString(4, CardNation);
        }
 
        String CardBorn = entity.getCardBorn();
        if (CardBorn != null) {
            stmt.bindString(5, CardBorn);
        }
 
        String CardCountry = entity.getCardCountry();
        if (CardCountry != null) {
            stmt.bindString(6, CardCountry);
        }
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(7, CardNo);
        }
 
        String CardApartment = entity.getCardApartment();
        if (CardApartment != null) {
            stmt.bindString(8, CardApartment);
        }
 
        String CardPeriod = entity.getCardPeriod();
        if (CardPeriod != null) {
            stmt.bindString(9, CardPeriod);
        }
 
        String CardImage = entity.getCardImage();
        if (CardImage != null) {
            stmt.bindString(10, CardImage);
        }
 
        String SnapImage = entity.getSnapImage();
        if (SnapImage != null) {
            stmt.bindString(11, SnapImage);
        }
        stmt.bindDouble(12, entity.getCompareScore());
        stmt.bindLong(13, entity.getCompareTime());
 
        String CompareResult = entity.getCompareResult();
        if (CompareResult != null) {
            stmt.bindString(14, CompareResult);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SendInfo readEntity(Cursor cursor, int offset) {
        SendInfo entity = new SendInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CardName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CardSex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CardNation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CardBorn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CardCountry
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CardNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CardApartment
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CardPeriod
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CardImage
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // SnapImage
            cursor.getFloat(offset + 11), // CompareScore
            cursor.getLong(offset + 12), // CompareTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // CompareResult
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SendInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCardNation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCardBorn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCardCountry(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCardNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCardApartment(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCardPeriod(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCardImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSnapImage(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCompareScore(cursor.getFloat(offset + 11));
        entity.setCompareTime(cursor.getLong(offset + 12));
        entity.setCompareResult(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SendInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SendInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SendInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
