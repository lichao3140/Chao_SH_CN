package com.runvision.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOCKET_RECORD".
*/
public class SocketRecordDao extends AbstractDao<SocketRecord, Long> {

    public static final String TABLENAME = "SOCKET_RECORD";

    /**
     * Properties of entity SocketRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreateTime = new Property(1, String.class, "createTime", false, "createTime");
        public final static Property SnapImageID = new Property(2, String.class, "snapImageID", false, "snapImageID");
        public final static Property TemplateImageID = new Property(3, String.class, "templateImageID", false, "templateImageID");
        public final static Property IsSuccess = new Property(4, String.class, "isSuccess", false, "isSuccess");
    }


    public SocketRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SocketRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOCKET_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"createTime\" TEXT," + // 1: createTime
                "\"snapImageID\" TEXT," + // 2: snapImageID
                "\"templateImageID\" TEXT," + // 3: templateImageID
                "\"isSuccess\" TEXT);"); // 4: isSuccess
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOCKET_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SocketRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
 
        String snapImageID = entity.getSnapImageID();
        if (snapImageID != null) {
            stmt.bindString(3, snapImageID);
        }
 
        String templateImageID = entity.getTemplateImageID();
        if (templateImageID != null) {
            stmt.bindString(4, templateImageID);
        }
 
        String isSuccess = entity.getIsSuccess();
        if (isSuccess != null) {
            stmt.bindString(5, isSuccess);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SocketRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
 
        String snapImageID = entity.getSnapImageID();
        if (snapImageID != null) {
            stmt.bindString(3, snapImageID);
        }
 
        String templateImageID = entity.getTemplateImageID();
        if (templateImageID != null) {
            stmt.bindString(4, templateImageID);
        }
 
        String isSuccess = entity.getIsSuccess();
        if (isSuccess != null) {
            stmt.bindString(5, isSuccess);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SocketRecord readEntity(Cursor cursor, int offset) {
        SocketRecord entity = new SocketRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // snapImageID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // templateImageID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // isSuccess
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SocketRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSnapImageID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTemplateImageID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsSuccess(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SocketRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SocketRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SocketRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
